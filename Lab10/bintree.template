// FILE: bintree.template
// IMPLEMENTS: The binary_tree node class (see bintree.h for documentation). 
#include <cassert>    // Provides assert
#include <cstdlib>   // Provides NULL, std::size_t
#include <iomanip>    // Provides std::setw
#include <iostream>   // Provides std::cout
using namespace std;

//    //Finding the depth of the tree --Question 1
//    template <class Item>
//    int depth(binary_tree_node<Item> *root)
//    {
//       if(root == NULL)
//           return -1;
//       else return 1 + max(depth(root->left()), depth(root->right()));
//    }
//
//    // Return True if the tree is balanced else False --Question 5
//    template <class Item>
//    bool tree_is_balanced(binary_tree_node<Item> *root) {
//       if(root==NULL) 
//           return true;
//       else if(!tree_is_balanced(root->left())||!tree_is_balanced(root->right())) 
//           return false;
//       else if(abs((depth(root->left()))-(depth(root->right()))>1) )
//           return false;
//       else return true;
//    }
//    // Finding the max value in a tree --Question 2
//    template <class Item>
//    Item max(binary_tree_node<Item> *root){
//        if(root->right() == NULL)
//            return root->data();
//        else max(root->right());
//    }
//    
//    // The sum of values in all nodes of a tree --Question 3
//    double tree_sum(binary_tree_node<double> *root) {
//        if(root == NULL) 
//            return 0;
//        return (root->data() + tree_sum(root->left()) + tree_sum(root->right()));        
//    }
//
//    double tree_average(binary_tree_node<double> *root)
//    {
//        return tree_sum(root) / tree_size(root) ;
//    }
//


    template <class Process, class BTNode>
    void inorder(Process f, BTNode* node_ptr)
    // Library facilities used: cstdlib
    {
        if (node_ptr != NULL)
        {
            inorder(f, node_ptr->left( ));
            f( node_ptr->data( ) );
            inorder(f, node_ptr->right( ));
        }
    }

    template <class Process, class BTNode>
    void postorder(Process f, BTNode* node_ptr)
    // Library facilities used: cstdlib
    {
        if (node_ptr != NULL)
        {
            postorder(f, node_ptr->left( ));
            postorder(f, node_ptr->right( ));
            f(node_ptr->data( ));
        }
    }

    template <class Process, class BTNode>
    void preorder(Process f, BTNode* node_ptr)
    // Library facilities used: cstdlib
    {
        if (node_ptr != NULL)
        {
            f( node_ptr->data( ) );
            preorder(f, node_ptr->left( ));
            preorder(f, node_ptr->right( ));
        }
    }

    template <class Item, class SizeType>
    void print(binary_tree_node<Item>* node_ptr, SizeType depth)
    // Library facilities used: iomanip, iostream, stdlib
    {
        if (node_ptr != NULL)
        {
            print(node_ptr->right( ), depth+1);
            std::cout << std::setw(4*depth) << ""; // Indent 4*depth spaces.
            std::cout << node_ptr->data( ) << std::endl;
            print(node_ptr->left( ),  depth+1);
        }
    }    
	
    template <class Item>
    void tree_clear(binary_tree_node<Item>*& root_ptr)
    // Library facilities used: cstdlib
    {
	binary_tree_node<Item>* child;
	if (root_ptr != NULL)
	{
	    child = root_ptr->left( );
	    tree_clear( child );
	    child = root_ptr->right( );
	    tree_clear( child );
	    delete root_ptr;
	    root_ptr = NULL;
	}
    }

    template <class Item>
    binary_tree_node<Item>* tree_copy(const binary_tree_node<Item>* root_ptr)
    // Library facilities used: cstdlib
    {
	binary_tree_node<Item> *l_ptr;
	binary_tree_node<Item> *r_ptr;

	if (root_ptr == NULL)
	    return NULL;
	else
	{
	    l_ptr = tree_copy( root_ptr->left( ) );
	    r_ptr = tree_copy( root_ptr->right( ) );
	    return
		new binary_tree_node<Item>( root_ptr->data( ), l_ptr, r_ptr);
	}
    }

    template <class Item>
    size_t tree_size(const binary_tree_node<Item>* node_ptr)
    // Library facilities used: cstdlib
    {
        if (node_ptr == NULL)
            return 0;
        else 
            return 1 + tree_size(node_ptr->left( )) + tree_size(node_ptr->right( ));
    }    

