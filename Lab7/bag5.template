//Last two functions were implemented by me

#include <cassert> // Provides assert
#include <cstdlib> // Provides NULL, rand
#include "node2.h" // Provides node


template <class Item>
bag<Item>::bag( )
// Library facilities used: cstdlib
{
   head_ptr = NULL;
   many_nodes = 0;
}

template <class Item>
bag<Item>::bag(const bag<Item>& source)
// Library facilities used: node2.h
{
   node<Item> *tail_ptr; // Needed for argument of list_copy

   list_copy(source.head_ptr, head_ptr, tail_ptr);
   many_nodes = source.many_nodes;
}

template <class Item>
bag<Item>::~bag( )
// Library facilities used: node2.h
{
   list_clear(head_ptr);
   many_nodes = 0;
}

template <class Item>
typename bag<Item>::size_type bag<Item>::count(const Item& target) const
// Library facilities used: cstdlib, node2.h
{
   size_type answer;
   const node<Item> *cursor;
  
   answer = 0;
   cursor = list_search(head_ptr, target);
   while (cursor != NULL)
   {
        ++answer;
        cursor = cursor->link( );
        cursor = list_search(cursor, target);
   }
   return answer;
}

template <class Item>
typename bag<Item>::size_type bag<Item>::erase(const Item& target)
// Library facilities used: cstdlib, node2.h
{
        size_type answer = 0;
        node<Item> *target_ptr;

        target_ptr = list_search(head_ptr, target);
        while (target_ptr != NULL)
        {
            // Each time that target_ptr is not NULL, we have another occurrence
        // of target. We remove this target using the same technique that
        // was used in erase_one.
            ++answer;
        --many_nodes;
            target_ptr->set_data( head_ptr->data( ) );
            target_ptr = target_ptr->link( );
            target_ptr = list_search(target_ptr, target);
            list_head_remove(head_ptr);
        }
        return answer;
}
  
template <class Item>
bool bag<Item>::erase_one(const Item& target)
// Library facilities used: cstdlib, node2.h
{
   node<Item> *target_ptr;

   target_ptr = list_search(head_ptr, target);
   if (target_ptr == NULL)
        return false; // target isn't in the bag, so no work to do
   target_ptr->set_data( head_ptr->data( ) );
   list_head_remove(head_ptr);
   --many_nodes;
   return true;
}

template <class Item>
Item bag<Item>::grab( ) const
// Library facilities used: cassert, cstdlib, node2.h
{
   size_type i;
   const node<Item> *cursor;

   assert(size( ) > 0);
   i = (std::rand( ) % size( )) + 1;
   cursor = list_locate(head_ptr, i);
   return cursor->data( );
}

template <class Item>
void bag<Item>::insert(const Item& entry)
// Library facilities used: node2.h
{
   list_head_insert(head_ptr, entry);
   ++many_nodes;
}

template <class Item>
void bag<Item>::operator +=(const bag<Item>& addend)
// Library facilities used: node2.h
{
   node<Item> *copy_head_ptr;
   node<Item> *copy_tail_ptr;
  
   if (addend.many_nodes > 0)
   {
        list_copy(addend.head_ptr, copy_head_ptr, copy_tail_ptr);
        copy_tail_ptr->set_link( head_ptr );
        head_ptr = copy_head_ptr;
        many_nodes += addend.many_nodes;
   }
}
  
template <class Item>
void bag<Item>::operator =(const bag<Item>& source)
// Library facilities used: node2.h
{
   node<Item> *tail_ptr; // Needed for argument to list_copy

   if (this == &source)
            return;

   list_clear(head_ptr);
   many_nodes = 0;

   list_copy(source.head_ptr, head_ptr, tail_ptr);
   many_nodes = source.many_nodes;
}

template <class Item>
bag<Item> operator +(const bag<Item>& b1, const bag<Item>& b2)
{
   bag<Item> answer;

   answer += b1;
   answer += b2;
   return answer;
}


template <class Item>
void bag<Item>::print_value_range(const Item& x, const Item& y)
{  
   node_iterator<Item> start(head_ptr);
   node_iterator<Item> finish;
   node_iterator<Item> position;
   node_iterator<Item> x_Pos(list_search(head_ptr, x));
   node_iterator<Item> end;
   node_iterator<Item> pos;
   std::string answer = "noY";

   for(position = start; position != finish; ++position)
   {
       if(*position != x)
       {
           answer = "nothing";
       }
   }
  
       for(position = x_Pos; position != finish; ++position)
   {
       if(*position == x)
       {
           if(*position != y)
           {
           answer = "noY";
           //++position;
            }
       }
       else if(*position == y)
       {
           answer = "default";
       }  
   }

   if(answer == "noY")
   {
   for(position = x_Pos; position != finish; ++position)
   {
       std::cout << *position << " ";
   }
       std::cout << std::endl;  
    }
   else if(answer == "nothing")
   {
       std::cout << "(nothing)" << " ";
       std::cout << std::endl;
   }  
   else
   {
       for(position = start; position != finish; ++position)
   {
       if(*position == x)
       {  
           while(*position != y)
           {
               std::cout << *position << " ";
               ++position;
            }
       }
   }
                 std::cout << std::endl;  
    }
}

//Postcondition: Removes repetitions from the list
template <class Item>
void bag<Item>::remove_repetitions()
{
   node<Item> *p;
      
   for(p = head_ptr; p != NULL; p = p->link())
   {      
       node<Item> *q = p;

       while(q->link() != NULL)
       {           
           if(q->link()->data() == p->data())
           {
               list_remove(q);  
               many_nodes--;
           }
           else
           {
               q = q->link();
           }
       }  
   }
}